% Starting city specification.
startingCity(austin).
% Budget available
budgetB(11).

cityOfDegree(P,0,P,0) :- startingCity(P).

% Discovers iteratively map of the cities. All map is not loaded at once.
% &edges[F1](F2,Co) discovers edge between city F1 and F2 and its cost Co
cityOfDegree(F1,DegPlus,F2,Cost) :- cityOfDegree(_,Deg,F1,_), &edges[F1](F2,Cost), DegPlus = Deg + 1,DegPlus < 4 , #int(DegPlus), #int(Deg), #int(Cost).

% Extract all nodes discovered.
node(Y) :- cityOfDegree(X,V,Y,C).

% Extract all edges discovered.
edge(X,Y) :- cityOfDegree(X,V,Y,C).

% Store all edges and their weights.
cost(X,Y,C) :- cityOfDegree(X,V,Y,C).

% Every node has exactly one incoming and outcoming edge.
{ cycle(X,Y) : edge(X,Y) } = 1 :- node(X).
{ cycle(X,Y) : edge(X,Y) } = 1 :- node(Y).

% Define reached nodes.
reached(Y) :- cycle(austin,Y).
reached(Y) :- cycle(X,Y), reached(X).

% Sum the overall costs for the cycle.
costCalculated(X) :- #sum{C,X,Y : cycle(X,Y),cost(X,Y,C) } = X.

% If any node not reached, it is not minimum spanning tree, remove answer set.
:- node(Y), not reached(Y).

% Eliminate answer sets where cost is higher than budget B.
lastCheck(B, C) :- budgetB(B), costCalculated(C), B >= C.
:- budgetB(B), costCalculated(C), not lastCheck(B,C).

% Find best answer set accordng to the edge costs.
:~ cycle(X,Y), cost(X,Y,C). [C@1,X,Y,C]
